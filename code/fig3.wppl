var _ = underscore;


var modelDict = {fair: fairGroup, bias: biasGroup, markov: markovGroup };

var trialsRaw = project.readCsv('../data/coins-trials.csv')

var comparisons = ['fair-bias','bias-markov','fair-bias-markov'];

// remove spaces from the sequence field
var trials = map(function(row) {
    return _.extend({}, row, {sequence: row.sequence.replace(/ /g,'')})
}, trialsRaw);


var out = pam(
    comparisons,
    function(comparison) {
        var modelNames = comparison.split('-');

        var outputDict = pamObject(
            _.groupBy(trials, 'sequence'),
            function(seqString, rows) {
                var sequence = parseExperiment(seqString)

                var n = rows.length;
                var eigDist = EIG({
                    mNameSample: function() { uniformDraw(modelNames) },
                    mFuncs: modelDict,
                    xSample: function() { return sequence },
                    ySample: function() { var k = randomInteger(n); return [k,n-k] }
                })

                // aig
                var frequencies = _.countBy(rows, 'response');

                var aig = AIG({
                    mNameSample: function() { uniformDraw(modelNames) },
                    mFuncs: modelDict,
                    x: sequence,
                    y: [frequencies['H'], frequencies['T']]
                })

                return {
                    comparison: comparison,
                    n: n,
                    experiment: seqString,
                    eig: eigDist.support()[0].EIG,
                    aig: aig
                }
            });

        return _.values(outputDict);

    })

JSON.stringify(_.flatten(out), null, 1)
